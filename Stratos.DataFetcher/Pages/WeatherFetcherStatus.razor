@page "/status"
@using System.Timers;

<h3>WeatherFetcherStatus</h3>
<MudText>@status</MudText>
<MudText>@errorMsg</MudText>
<MudText>@currentCityMsg</MudText>


@code {
    public static bool isRunning = true;
    public static string commandState;
    public static string currentCity = "";
    public string currentCityMsg = "Getting Cities...";
    public string status = "Checking service state...";
    public string errorMsg = "";

    private System.Timers.Timer aTimer { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        aTimer = new System.Timers.Timer(5000);
        aTimer.Elapsed += StatusChecker;
        aTimer.Start();

        await base.OnInitializedAsync();
    }

    public void StatusChecker(Object source, ElapsedEventArgs e)
    {
        if (isRunning == true || Processes.WeatherGetter.isTimerRunning == true)
        {
            status = "The service is running correctly";
            errorMsg = "***No error detected***";
            currentCityMsg = "Getting weather from cities";
        }
        else if (Processes.WeatherGetter.isTimerRunning == false)
        {
            status = "The service got stopped from another container!";
        }
        else
        {
            status = "The service is NOT running correctly";
            errorMsg = "***Unexpected error detected***";
            currentCityMsg = "Have you misspelled the cityName?";
        }

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}
